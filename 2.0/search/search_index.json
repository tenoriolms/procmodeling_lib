{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"Welcome to procmodeling! An easy way to solve and optimize your ODE system."},{"location":"#how-to-solve-your-ode","title":"How to Solve Your ODE","text":"<p>FIRST STEP: Create a <code>.txt</code> file or a docstring variable containing the ODEs using Python equation syntax.</p> edo_Lotka_Volterra.txt<pre><code># Let's use the Lotka-Volterra ODEs where:\n# y[0] = prey population\n# y[1] = predator population\n# dydt[0] = rate of change of prey over time\n# dydt[1] = rate of change of predators over time\n\n# Define the EDOs\ndydt[0] = a * y[0] - b * y[0] * y[1]\ndydt[1] = d * y[0] * y[1] - g * y[1]\n\n# Define the parameters:\na = 1.0    # prey birth rate\nb = 0.1    # predation rate\nd = 0.075  # predator growth rate\ng = 1.5    # predator death rate\n</code></pre> <p>Please note the following three rules:</p> <ol> <li>The names <code>y</code>, <code>t</code>, and <code>dy/dt</code> are reserved keywords representing the dependent variables, time, and the ODE system, respectively;</li> <li>Both <code>y</code> and <code>dy/dt</code> are vectors, where <code>[i]</code> (<code>i</code> being an integer) indicates the index of the dependent variable;</li> <li>Respect Python\u2019s equation syntax and make sure to define all the variables used in the system's equations. The order of expeditions does not matter.</li> </ol> <p>SECOND STEP: Import and check your equations</p> <pre><code>from procmodeling import solver\nedo = solver.edo_functions('edo_Lotka_Volterra.txt')\n</code></pre> Example Output <p><pre><code>edo_functions: Document was read\n</code></pre> </p> <p>THIRD STEP: Call the solve method after setting the time span and initial conditions</p> <pre><code>edo.solve( t_span=[0,15], y0=[40, 10] )\n</code></pre> Example Output <p></p>"},{"location":"#how-to-optimize-your-edo","title":"How to Optimize Your EDO","text":"<p>FIRST STEP: After successfully solving your ODE, organize the data (which will be used for parameter fitting) into a DataFrame following the format below:</p> Initial Conditions Time Conditions at time = j \\(y_0[1]\\) \\(y_0[1]\\) ... \\(y_0[j]\\) t \\(y[0]\\) \\(y[1]\\) ... \\(y[j]\\) y0[0]\\(i\\) y0[1]\\(i\\) ... y0[j]\\(i\\) j y[0]\\(i\\) y[1]\\(i\\) ... y[j]\\(i\\) ... ... ... ... ... ... ... ... ... <p>Note</p> <p>This structure allows you to fit your ODE model using multiple initial conditions if needed.</p> <p>SECOND STEP: Define the search space for the parameters and call the optimizer</p> <pre><code>bounds = {\n    'param1': (min, max),\n    'param2': (min, max),\n    ...\n    }\n\ninitial_conditions_columns = ['y0[0]', 'y0[1]', ... ]\n\nedo.optimize(\n    data = generated_data,\n    initial_values_columns = initial_conditions_columns,\n    target_values_columns = ['y[0]', 'y[1]', ...],\n    time_column = 'time',\n    bounds = bounds\n)\n</code></pre> <p>Note</p> <p>An example of optimizing the Lotka-Volterra ODE is available here</p>"},{"location":"apireference/1_solver/","title":"solver","text":"EDO Solver"},{"location":"apireference/1_solver/#edo_functions","title":"<code>edo_functions</code>","text":"<pre><code>class edo_functions()\n</code></pre> <p>Class for reading, parsing, solving, visualizing, and optimizing systems of ordinary differential equations (ODEs). The system can be loaded from a text file or from a docstring containing mathematical expressions. The class supports numerical integration and parameter optimization.</p> <p>Parameters:</p> <ul> <li> <p><code>name</code>: <code>str</code></p> <p>Path to a text file or a docstring containing the system of equations.</p> </li> </ul> <p>Default Parameters:</p> <ul> <li> <p><code>verbose = True</code>: <code>bool</code></p> <p>If True, prints information when reading the equations.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <p><code>diff_equations</code>: <code>dict</code></p> <p>Dictionary containing the parsed differential equations.</p> </li> <li> <p><code>expressions</code>: <code>dict</code></p> <p>Dictionary containing additional expressions used in the system.</p> </li> <li> <p><code>params</code>: <code>dict</code></p> <p>Dictionary containing the constant parameters of the system.</p> </li> <li> <p><code>lines</code>: <code>list</code></p> <p>List of strings representing each line read from the input.</p> </li> <li> <p><code>function</code>: callable</p> <p>The system of ODEs as a callable function compatible with SciPy's <code>solve_ivp</code>. Takes time <code>t</code> and state vector <code>y</code>, returns the derivatives <code>dy/dt</code> as a list.</p> </li> <li> <p><code>result</code>: scipy solution object</p> <p>Solution object after solving the system.</p> </li> <li> <p><code>opt_result</code>: OptimizeResult</p> <p>Result of the optimization.</p> </li> <li> <p><code>opt_params</code>: <code>dict</code></p> <p>Optimized parameters.</p> </li> </ul> <p>Methods:</p> <ul> <li> <p><code>show_equations()</code></p> <p>Displays the system of equations using LaTeX formatting.</p> </li> <li> <p><code>_call_function(equations, params)</code></p> <p>Constructs and returns a callable ODE system function for <code>solve_ivp</code> from a list of equation strings and parameter values.</p> </li> <li> <p><code>solve(t_span, y0, t_eval=None, method='RK45', show_plot=True, _params=None, _data=None, _var_columns=None, _time_column=None)</code></p> <p>Solves the system of ODEs numerically using <code>scipy.integrate.solve_ivp</code>.</p> </li> <li> <p><code>_plot_results(data, var_columns, time_column)</code></p> <p>Plots the solution curves and optionally overlays experimental data.</p> </li> <li> <p><code>optimize(data, initial_values_columns, target_values_columns, time_column, bounds, method='differential_evolution', solver_method='RK45', score='rmse', max_iter_DE=100, popsize_DE=15)</code></p> <p>Optimizes model parameters to fit experimental data using evolutionary algorithms.</p> </li> <li> <p><code>_call_objective_function()</code></p> <p>Builds and returns the objective function used for parameter optimization.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>None</code></li> </ul> <p>Notes:</p> <ul> <li>The system of equations must be written with each equation in the form <code>dydt[i] = expression</code>.</li> <li>Additional expressions and parameters can be defined using <code>key = value</code> syntax.</li> <li>During optimization, each distinct initial condition is automatically identified, and the system is solved for each one.</li> <li>Supported score metrics include <code>rmse</code>, <code>r2</code>, <code>neg_r2</code>, <code>mape</code>, and <code>c_coeff</code>.</li> </ul> <p>Examples:</p> <pre><code>edo = edo_functions('model.txt')\nedo.solve(t_span=[0,10], y0=[1,0])\nedo.optimize(\n    data=df,\n    initial_values_columns=['A', 'B'],\n    target_values_columns=['A', 'B'],\n    time_column='time',\n    bounds={'k1': (0, 1), 'k2': (0, 1)}\n)\n</code></pre> <p>References:</p> <ul> <li>scipy.integrate.solve_ivp</li> <li>scipy.optimize.differential_evolution</li> </ul> <p>Dependencies:</p> <ul> <li>numpy</li> <li>pandas</li> <li>scipy</li> <li>matplotlib</li> <li>tqdm</li> </ul>"},{"location":"apireference/1_solver/#method-show_equations","title":"method: <code>show_equations()</code>","text":"<p>Displays the differential equations, expressions, and parameters in a formatted LaTeX style plot.</p> <p>Examples</p> <pre><code>edo = edo_functions('equations.txt')\nedo.show_equations()\n</code></pre>"},{"location":"apireference/1_solver/#method-_call_function","title":"method: <code>_call_function()</code>","text":"<p>Constructs and returns a callable function representing the ODE system, compatible with SciPy's solve_ivp.</p> <p>The returned function takes time t and state vector y as inputs, evaluates the right-hand side of each equation string using the provided parameters and predefined mathematical functions, and returns the derivatives as a list.</p> <p>Parameters:</p> <ul> <li> <p><code>equations</code>: <code>list</code>   List of strings representing the right-hand side expressions of the ODE system.</p> </li> <li> <p><code>params</code>: <code>dict</code>   Dictionary containing parameter names and their numerical values used in the equations.</p> </li> </ul> <p>Examples</p> <pre><code>equations = ['-k1 * y[0]', 'k1 * y[0] - k2 * y[1]']\nparams = {'k1': 0.1, 'k2': 0.05}\nedo_func = edo._call_function(equations, params)\nresult = solve_ivp(edo_func, (0, 10), [1, 0])\n</code></pre>"},{"location":"apireference/1_solver/#method-solve","title":"method: <code>solve()</code>","text":"<p>Solves the system of ODEs using SciPy's <code>solve_ivp</code> and optionally plots the results.</p> <p>Parameters:</p> <ul> <li> <p><code>t_span</code>: <code>list</code>   Time span as a list <code>[t_start, t_end]</code> for the integration.</p> </li> <li> <p><code>y0</code>: <code>list</code>   List of initial values for the ODE system.</p> </li> </ul> <p>Default Parameters:</p> <ul> <li> <p><code>t_eval = None</code>: <code>array-like</code>   Optional. Time points at which to store the computed solution.</p> </li> <li> <p><code>method = 'RK45'</code>: <code>str</code>    Integration method to use (e.g., <code>'RK45'</code>, <code>'BDF'</code>, etc.).</p> </li> <li> <p><code>show_plot = True</code>: <code>bool</code>    Whether to display a plot of the results.</p> </li> <li> <p><code>_params = None</code>: <code>dict</code>    Optional. Dictionary of parameter values to use in the ODE system.</p> </li> <li> <p><code>_data = None</code>: <code>pandas.DataFrame</code>    Optional. Experimental data for comparison with model predictions.</p> </li> <li> <p><code>_var_columns = None</code>: <code>list</code>   Optional. List of variable names in <code>_data</code> corresponding to the ODE outputs.</p> </li> <li> <p><code>_time_column = None</code>: <code>str</code>   Optional. Name of the time column in <code>_data</code>.</p> </li> </ul> <p>Examples</p> <pre><code>edo = edo_functions('equations.txt')\nedo.solve(t_span=[0, 10], y0=[1.0, 0.0])\n</code></pre>"},{"location":"apireference/1_solver/#method-_plot_results","title":"method: <code>_plot_results()</code>","text":"<p>Plots the results of the ODE solution and optionally overlays experimental data for comparison.</p> <p>Parameters:</p> <ul> <li> <p><code>data</code>: <code>pandas.DataFrame</code> or <code>None</code>   Experimental data to overlay on the simulation results.</p> </li> <li> <p><code>var_columns</code>: <code>list</code> or <code>None</code>   List of variable names in <code>data</code> corresponding to the ODE outputs.</p> </li> <li> <p><code>time_column</code>: <code>str</code> or <code>None</code>   Name of the time column in <code>data</code>.</p> </li> </ul> <p>Examples</p> <pre><code># Assuming `edo` has already solved the ODE system:\nedo._plot_results(data=experimental_data, var_columns=['A', 'B'], time_column='time')\n</code></pre>"},{"location":"apireference/1_solver/#method-optimize","title":"method: <code>optimize()</code>","text":"<p>Performs parameter optimization to fit the ODE model to experimental data using the specified optimization method.</p> <p>Parameters:</p> <ul> <li> <p><code>data</code>: <code>pandas.DataFrame</code>   Experimental dataset containing time series and target variables.</p> </li> <li> <p><code>initial_values_columns</code>: <code>list</code>   List of column names in <code>data</code> representing the initial values of the ODE system.</p> </li> <li> <p><code>target_values_columns</code>: <code>list</code>   List of column names in <code>data</code> representing the target variables to be fitted.</p> </li> <li> <p><code>time_column</code>: <code>str</code>   Name of the time column in <code>data</code>.</p> </li> <li> <p><code>bounds</code>: <code>dict</code>   Dictionary defining the lower and upper bounds for each parameter to be optimized.</p> </li> </ul> <p>Default Parameters:</p> <ul> <li> <p><code>method = 'differential_evolution'</code>: <code>str</code>   Optimization method to use (currently supports <code>'differential_evolution'</code>).</p> </li> <li> <p><code>solver_method = 'RK45'</code>: <code>str</code>   Numerical integration method for solving the ODEs (e.g., <code>'RK45'</code>, <code>'BDF'</code>).</p> </li> <li> <p><code>score = 'rmse'</code>: <code>str</code>   Evaluation metric to minimize (<code>'rmse'</code>, <code>'r2'</code>, <code>'mape'</code>, <code>'c_coeff'</code>, etc.).</p> </li> <li> <p><code>max_iter_DE = 100</code>: <code>int</code>   Maximum number of iterations for the differential evolution optimizer.</p> </li> <li> <p><code>popsize_DE = 15</code>: <code>int</code>   Population size multiplier for the differential evolution optimizer.</p> </li> </ul> <p>Examples</p> <pre><code>edo = edo_functions('equations.txt')\n\nbounds = {'k1': (0, 1), 'k2': (0, 1)}\n\nedo.optimize(\n    data=experimental_data,\n    initial_values_columns=['A0', 'B0'],\n    target_values_columns=['A', 'B'],\n    time_column='time',\n    bounds=bounds\n)\n</code></pre>"},{"location":"apireference/1_solver/#method-_call_objective_function","title":"method: <code>_call_objective_function()</code>","text":"<p>Builds and returns the objective function used for parameter optimization.</p> <p>The objective function solves the ODE system for each set of initial conditions found in the provided dataset, compares the simulated results with the experimental data, and computes the cumulative error based on the selected scoring metric (e.g., RMSE).</p> <p>Examples</p> <pre><code>edo = edo_functions('equations.txt')\nobjective_function = edo._call_objective_function()\nerror = objective_function([0.1, 0.05])  # Example parameter values\n</code></pre>"}]}